[{"D:\\Documents\\Webspred\\Webspred-App\\client\\src\\reportWebVitals.js":"1","D:\\Documents\\Webspred\\Webspred-App\\client\\src\\App.js":"2","D:\\Documents\\Webspred\\Webspred-App\\client\\src\\components\\Sidebar\\index.js":"3","D:\\Documents\\Webspred\\Webspred-App\\client\\src\\components\\OptionGroup\\index.js":"4","D:\\Documents\\Webspred\\Webspred-App\\client\\src\\context\\viewport.js":"5","D:\\Documents\\Webspred\\Webspred-App\\client\\src\\context\\notifications.js":"6","D:\\Documents\\Webspred\\Webspred-App\\client\\src\\components\\Notification\\index.js":"7","D:\\Documents\\Webspred\\Webspred-App\\client\\src\\components\\NavBar\\index.js":"8","D:\\Documents\\Webspred\\Webspred-App\\client\\src\\components\\Heading\\index.js":"9","D:\\Documents\\Webspred\\Webspred-App\\client\\src\\components\\Page\\index.js":"10","D:\\Documents\\Webspred\\Webspred-App\\client\\src\\components\\CopyrightBanner\\index.js":"11","D:\\Documents\\Webspred\\Webspred-App\\client\\src\\config.js":"12","D:\\Documents\\Webspred\\Webspred-App\\client\\src\\index.js":"13","D:\\Documents\\Webspred\\Webspred-App\\client\\src\\components\\UI\\Container\\index.js":"14","D:\\Documents\\Webspred\\Webspred-App\\client\\src\\routes\\GetLeads\\index.js":"15","D:\\Documents\\Webspred\\Webspred-App\\client\\src\\components\\Forms\\GetLeads\\index.js":"16","D:\\Documents\\Webspred\\Webspred-App\\client\\src\\scripts\\getLeads.js":"17","D:\\Documents\\Webspred\\Webspred-App\\client\\src\\scripts\\getSemRushInfo.js":"18","D:\\Documents\\Webspred\\Webspred-App\\client\\src\\scripts\\createDrafts.js":"19"},{"size":362,"mtime":1608720397685,"results":"20","hashOfConfig":"21"},{"size":6999,"mtime":1612338085425,"results":"22","hashOfConfig":"21"},{"size":1225,"mtime":1612283554378,"results":"23","hashOfConfig":"21"},{"size":1151,"mtime":1612283540524,"results":"24","hashOfConfig":"21"},{"size":1384,"mtime":1612284799865,"results":"25","hashOfConfig":"21"},{"size":1578,"mtime":1612284781641,"results":"26","hashOfConfig":"21"},{"size":2619,"mtime":1612284987401,"results":"27","hashOfConfig":"21"},{"size":989,"mtime":1612285984782,"results":"28","hashOfConfig":"21"},{"size":442,"mtime":1612285384795,"results":"29","hashOfConfig":"21"},{"size":471,"mtime":1612285409226,"results":"30","hashOfConfig":"21"},{"size":637,"mtime":1612285688230,"results":"31","hashOfConfig":"21"},{"size":193,"mtime":1612285810901,"results":"32","hashOfConfig":"21"},{"size":500,"mtime":1608720397685,"results":"33","hashOfConfig":"21"},{"size":407,"mtime":1612283569228,"results":"34","hashOfConfig":"21"},{"size":284,"mtime":1612290137722,"results":"35","hashOfConfig":"21"},{"size":8931,"mtime":1612425281362,"results":"36","hashOfConfig":"21"},{"size":17773,"mtime":1612338633400,"results":"37","hashOfConfig":"21"},{"size":122,"mtime":1612338748908,"results":"38","hashOfConfig":"21"},{"size":148,"mtime":1612338694975,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1bcs60h",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Documents\\Webspred\\Webspred-App\\client\\src\\reportWebVitals.js",[],["86","87"],"D:\\Documents\\Webspred\\Webspred-App\\client\\src\\App.js",[],["88","89"],"D:\\Documents\\Webspred\\Webspred-App\\client\\src\\components\\Sidebar\\index.js",[],["90","91"],"D:\\Documents\\Webspred\\Webspred-App\\client\\src\\components\\OptionGroup\\index.js",[],"D:\\Documents\\Webspred\\Webspred-App\\client\\src\\context\\viewport.js",[],["92","93"],"D:\\Documents\\Webspred\\Webspred-App\\client\\src\\context\\notifications.js",[],["94","95"],"D:\\Documents\\Webspred\\Webspred-App\\client\\src\\components\\Notification\\index.js",[],["96","97"],"D:\\Documents\\Webspred\\Webspred-App\\client\\src\\components\\NavBar\\index.js",[],["98","99"],"D:\\Documents\\Webspred\\Webspred-App\\client\\src\\components\\Heading\\index.js",[],"D:\\Documents\\Webspred\\Webspred-App\\client\\src\\components\\Page\\index.js",[],"D:\\Documents\\Webspred\\Webspred-App\\client\\src\\components\\CopyrightBanner\\index.js",[],"D:\\Documents\\Webspred\\Webspred-App\\client\\src\\config.js",[],"D:\\Documents\\Webspred\\Webspred-App\\client\\src\\index.js",[],"D:\\Documents\\Webspred\\Webspred-App\\client\\src\\components\\UI\\Container\\index.js",[],"D:\\Documents\\Webspred\\Webspred-App\\client\\src\\routes\\GetLeads\\index.js",[],"D:\\Documents\\Webspred\\Webspred-App\\client\\src\\components\\Forms\\GetLeads\\index.js",["100","101","102","103","104"],"D:\\Documents\\Webspred\\Webspred-App\\client\\src\\scripts\\getLeads.js",["105"],"//------------------------------------------------------------------------------------//\r\n// Modules\r\n//------------------------------------------------------------------------------------//\r\n\r\nimport * as fetch from \"node-fetch\";\r\nimport * as cheerio from \"cheerio\";\r\nimport * as fs from \"fs\";\r\nimport * as fsExistsSync from \"fs-exists-sync\";\r\nimport { EventEmitter } from \"events\";\r\n\r\n//------------------------------------------------------------------------------------//\r\n// Config\r\n//------------------------------------------------------------------------------------//\r\n\r\nEventEmitter.defaultMaxListeners = 15;\r\nlet cors = \"https://enigmatic-springs-75355.herokuapp.com/\"; // Define cors anywhere so we can get the data from a client side script\r\n\r\n//------------------------------------------------------------------------------------//\r\n// Functions\r\n//------------------------------------------------------------------------------------//\r\n\r\n/*\r\nThis function calls the other functions to get information on websites that google\r\nresponds with.\r\n*/\r\nasync function GetProspects(searchTerm, results, time) {\r\n  let jsonResponse = { status: true, body: { results: [] } };\r\n\r\n  if (!searchTerm) {\r\n    console.log(\r\n      JSON.stringify(\r\n        {\r\n          status: false,\r\n          body: { msg: \"Provide a search term with 'searchTerm=query'\" },\r\n        },\r\n        null,\r\n        2\r\n      )\r\n    );\r\n    return;\r\n  }\r\n\r\n  let googleSearchString = `https://www.google.com/search?q=${searchTerm}&num=100`;\r\n\r\n  if (time === \"d\" || time === \"w\" || time === \"m\") {\r\n    // Show google indexes within the past 24 hours | 7 days | 1 month\r\n    googleSearchString += `&as_qdr=${time}`;\r\n  }\r\n\r\n  let searchGoogle = CheckGoogleBotLock();\r\n\r\n  if (!searchGoogle) {\r\n    // If we haven't waited at least an hour, dont search\r\n    console.log(\r\n      JSON.stringify(\r\n        {\r\n          status: false,\r\n          body: { msg: \"Please wait 1 hour till searching again\" },\r\n        },\r\n        null,\r\n        2\r\n      )\r\n    );\r\n    return;\r\n  }\r\n\r\n  console.log(\"Getting google searches: \" + googleSearchString);\r\n  let links = await SearchGoogle(googleSearchString);\r\n  if (!links.status) {\r\n    console.log(\r\n      JSON.stringify({ status: false, body: { msg: links.body.msg } }, null, 2)\r\n    );\r\n    return;\r\n  }\r\n\r\n  links = GetUnique(links.body);\r\n  if (results <= 100) {\r\n    links = links.slice(0, results);\r\n  } else {\r\n    console.log(\r\n      JSON.stringify(\r\n        {\r\n          status: false,\r\n          body: { msg: \"Cannot return more than 100 websites\" },\r\n        },\r\n        null,\r\n        2\r\n      )\r\n    );\r\n    return;\r\n  }\r\n\r\n  if (links.length > 0) {\r\n    for (let link of links) {\r\n      console.log(`Getting info on: ${link}`);\r\n      let result = await CreateJsonInfo(link);\r\n      if (result.status) {\r\n        jsonResponse.body.results.push(result.body);\r\n      }\r\n    }\r\n  } else {\r\n    jsonResponse.body.msg = \"Could not find any links\";\r\n    console.log(JSON.stringify(jsonResponse, null, 2));\r\n    return;\r\n  }\r\n\r\n  return jsonResponse;\r\n}\r\n\r\n/*\r\nGets results from a google search. This will return a list of links bases on the search\r\nresults with the provided options. The links returned are sorted in order of the search\r\nresults but are not weeded for duplicates.\r\n*/\r\nfunction SearchGoogle(link) {\r\n  return new Promise(async (resolve, reject) => {\r\n    let jsonResponse = { status: true, body: {} };\r\n\r\n    // Get HTML of website\r\n    let html, $;\r\n    try {\r\n      html = await (await fetch(cors + link)).text();\r\n      $ = cheerio.load(html);\r\n    } catch (err) {\r\n      reject({ status: false, body: { msg: err } });\r\n    }\r\n\r\n    let botDetection = $(\"#infoDiv\"); // Check for Google's bot detection\r\n    if (botDetection.length) {\r\n      let text = botDetection.text();\r\n      if (\r\n        text.match(\r\n          /This page appears when Google automatically detects requests/\r\n        )\r\n      ) {\r\n        fs.writeFileSync(\"GoogleBotLock\", new Date(new Date().getTime())); // Write current time and date to file\r\n        reject({\r\n          status: false,\r\n          body: { msg: \"Google detected bot detection\" },\r\n        });\r\n      }\r\n    }\r\n\r\n    let links = [];\r\n\r\n    let results = $(\"h3\").parent(\"a\"); // Get the results from the page\r\n    if (results.length) {\r\n      results.each((i, elem) => {\r\n        let href = $(elem).attr(\"href\");\r\n        if (href) {\r\n          href = href.replace(/^.*?q=/, \"\"); // Replace the rubbish at the beginning\r\n          links.push(href);\r\n        }\r\n      });\r\n    } else {\r\n      reject({\r\n        status: false,\r\n        body: { msg: \"Could not get search results\" },\r\n      });\r\n    }\r\n\r\n    if (links.length > 0) {\r\n      jsonResponse.body = links;\r\n      resolve(jsonResponse);\r\n    } else {\r\n      reject({ status: false, body: { msg: \"No results found\" } });\r\n    }\r\n  });\r\n}\r\n\r\n/*\r\nThis function will look through an array of links and remove the duplicates based on the\r\ndomain.\r\n*/\r\nfunction GetUnique(links) {\r\n  let correctedArray = [];\r\n  for (let link of links) {\r\n    link = link.replace(\r\n      /((\\.com)|(\\.co\\.uk)|(\\.org(\\.uk)?)|(\\.uk)|(\\.co)).*/,\r\n      \"$1\"\r\n    ); // Replace everything after the .com identifier\r\n    correctedArray.push(link);\r\n  }\r\n  correctedArray = [...new Set(correctedArray)];\r\n  return correctedArray;\r\n}\r\n\r\n/*\r\nThis function will return information such as contact info and social media stats and links.\r\nThis function is the parent function that calls other functions to get the specific data\r\nfrom social media sites.\r\n*/\r\nfunction CreateJsonInfo(link) {\r\n  return new Promise(async (resolve, reject) => {\r\n    let jsonResponse = { status: true, body: {} };\r\n\r\n    let json = {};\r\n    let identifier = link.replace(/^.*?\\/\\//, \"\"); // Replace everything up to the first //\r\n    identifier = identifier.replace(/^.*?((www)|(uk)|(en))\\./, \"\"); // Replace the first www. or other identifiers\r\n    identifier = identifier.replace(/\\..*$/, \"\"); // Replace everything after the first \".\"\r\n    let promises = []; // List of promises to wait on\r\n\r\n    json[identifier] = {\r\n      // Create the initial template for information\r\n      website: link,\r\n      facebookPage: {},\r\n      twitterPage: {},\r\n      instagramPage: {},\r\n      contactPage: {},\r\n    };\r\n\r\n    // Get HTML of website\r\n    let html, $;\r\n    try {\r\n      html = await (await fetch(cors + link)).text();\r\n      $ = cheerio.load(html);\r\n    } catch (err) {\r\n      reject({ status: false, body: { msg: err } });\r\n    }\r\n\r\n    let hrefs = $(\"a[href]\"); // Get all hrefs\r\n\r\n    // Get Facebook details\r\n    let facebook = hrefs\r\n      .filter((i, elem) => {\r\n        return $(elem)\r\n          .attr(\"href\")\r\n          .match(/facebook\\.com\\/(?!sharer)/);\r\n      })\r\n      .first();\r\n\r\n    if (facebook.length) {\r\n      let href = facebook.attr(\"href\");\r\n      if (href) {\r\n        json[identifier].facebookPage.link = href.replace(\r\n          /(\\.com\\/.*?)\\/.*/,\r\n          \"$1\"\r\n        ); // Replace everything after the identifier\r\n        json[identifier].facebookPage.status = true;\r\n        promises.push(\r\n          CheckFacebook(json[identifier].facebookPage.link).catch((err) => ({\r\n            status: false,\r\n            err,\r\n          }))\r\n        );\r\n      }\r\n    }\r\n\r\n    // Get Twitter details\r\n    let twitter = hrefs\r\n      .filter((i, elem) => {\r\n        return $(elem)\r\n          .attr(\"href\")\r\n          .match(/twitter\\.com\\/(?!intent)/);\r\n      })\r\n      .first();\r\n\r\n    if (twitter.length) {\r\n      let href = twitter.attr(\"href\");\r\n      if (href) {\r\n        json[identifier].twitterPage.link = href.replace(\r\n          /(\\.com\\/.*?)\\/.*/,\r\n          \"$1\"\r\n        ); // Replace everything after the identifier\r\n        json[identifier].twitterPage.status = true;\r\n        promises.push(\r\n          CheckTwitter(json[identifier].twitterPage.link).catch((err) => ({\r\n            status: false,\r\n            err,\r\n          }))\r\n        );\r\n      }\r\n    }\r\n\r\n    // Get Instagram details\r\n    let instagram = hrefs\r\n      .filter((i, elem) => {\r\n        return $(elem)\r\n          .attr(\"href\")\r\n          .match(/instagram\\.com\\/.*/);\r\n      })\r\n      .first();\r\n\r\n    if (instagram.length) {\r\n      let href = instagram.attr(\"href\");\r\n      if (href) {\r\n        json[identifier].instagramPage.link = href.replace(\r\n          /(\\.com\\/.*?)\\/.*/,\r\n          \"$1\"\r\n        ); // Replace everything after the identifier\r\n        json[identifier].instagramPage.status = true;\r\n        promises.push(\r\n          CheckInsta(json[identifier].instagramPage.link).catch((err) => ({\r\n            status: false,\r\n            err,\r\n          }))\r\n        );\r\n      }\r\n    }\r\n\r\n    // Get Contact details\r\n    let contactPageElem = hrefs\r\n      .filter((i, elem) => {\r\n        let link = $(elem)\r\n          .attr(\"href\")\r\n          .replace(/(.*?\\/\\/.*?\\/)|(^\\/)/, \"\"); // Regex out the domain but keep page identifier\r\n        return link.match(/contact/i);\r\n      })\r\n      .first();\r\n\r\n    if (contactPageElem.length) {\r\n      let contactPage = contactPageElem.attr(\"href\");\r\n      if (contactPage) {\r\n        json[identifier].contactPage.link =\r\n          link + \"/\" + contactPage.replace(/(.*?\\/\\/.*?\\/)|(^\\/)/, \"\");\r\n        promises.push(\r\n          GetContactInfo(json[identifier].contactPage.link).catch((err) => ({\r\n            status: false,\r\n            err,\r\n          }))\r\n        );\r\n      }\r\n    }\r\n\r\n    // Create the object with all the data returned\r\n    let contactInfo = await Promise.all(promises);\r\n    if (contactInfo.length === 4) {\r\n      if (contactInfo[0].status) {\r\n        json[identifier].facebookPage = {\r\n          ...json[identifier].facebookPage,\r\n          ...contactInfo[0].body,\r\n        };\r\n      }\r\n\r\n      if (contactInfo[1].status) {\r\n        json[identifier].twitterPage = {\r\n          ...json[identifier].twitterPage,\r\n          ...contactInfo[1].body,\r\n        };\r\n      }\r\n\r\n      if (contactInfo[2].status) {\r\n        json[identifier].instagramPage = {\r\n          ...json[identifier].instagramPage,\r\n          ...contactInfo[2].body,\r\n        };\r\n      }\r\n\r\n      if (contactInfo[3].status) {\r\n        json[identifier].contactPage = {\r\n          ...json[identifier].contactPage,\r\n          ...contactInfo[3].body,\r\n        };\r\n      }\r\n\r\n      // Set status of calls\r\n      json[identifier].facebookPage.status = contactInfo[0].status;\r\n      json[identifier].twitterPage.status = contactInfo[1].status;\r\n      json[identifier].instagramPage.status = contactInfo[2].status;\r\n      json[identifier].contactPage.status = contactInfo[3].status;\r\n    }\r\n\r\n    jsonResponse.body = json;\r\n    resolve(jsonResponse);\r\n  });\r\n}\r\n\r\n/*\r\nThis function returns the contact number found in a link provided. Provide a\r\ncontact page link for the best result.\r\n*/\r\nfunction GetContactInfo(link) {\r\n  return new Promise(async (resolve, reject) => {\r\n    let jsonResponse = { status: true, body: {} };\r\n\r\n    // Get HTML of website\r\n    let html, $;\r\n    try {\r\n      html = await (await fetch(cors + link)).text();\r\n      $ = cheerio.load(html);\r\n    } catch (err) {\r\n      reject({ status: false, body: { msg: err } });\r\n    }\r\n\r\n    let textElems = $(\"body *\").filter((i, elem) => {\r\n      // Get all text elements\r\n      return $(elem).text();\r\n    });\r\n\r\n    // Get contact number\r\n    let contactNumberElem = textElems\r\n      .filter((i, elem) => {\r\n        // Get all numbers that match 11 digits\r\n        if (\r\n          $(elem)\r\n            .text()\r\n            .match(/.*\\d[\\d\\s]{10,12}.*/g)\r\n        ) {\r\n          let number = $(elem).text().replace(/\\D/, \"\");\r\n          return number.length === 11;\r\n        }\r\n        return false;\r\n      })\r\n      .first();\r\n\r\n    if (contactNumberElem.length) {\r\n      let contactNumber = $(contactNumberElem).text().replace(/\\D/, \"\");\r\n      if (contactNumber) {\r\n        jsonResponse.body.number = contactNumber;\r\n      }\r\n    }\r\n\r\n    // Get contact email\r\n    let emailElem = textElems\r\n      .filter((i, elem) => {\r\n        return $(elem)\r\n          .text()\r\n          .match(/\\s\\w+@\\w+[.\\w]+\\s/);\r\n      })\r\n      .first();\r\n\r\n    if (emailElem.length) {\r\n      let email = $(emailElem).text();\r\n      if (email) {\r\n        jsonResponse.body.email = email.match(/\\s(\\w+@\\w+[.\\w]+)\\s/)[1];\r\n      }\r\n    }\r\n\r\n    resolve(jsonResponse);\r\n  });\r\n}\r\n\r\n/*\r\nGet information on a Facebook page.\r\n*/\r\nfunction CheckFacebook(link) {\r\n  return new Promise(async (resolve, reject) => {\r\n    let jsonResponse = {\r\n      status: true,\r\n      body: {\r\n        likes: 0,\r\n        followers: 0,\r\n        pageTitle: \"\",\r\n      },\r\n    };\r\n\r\n    // Get HTML of website\r\n    let html, $;\r\n    try {\r\n      html = await (await fetch(cors + link)).text();\r\n      $ = cheerio.load(html);\r\n    } catch (err) {\r\n      reject({ status: false, body: { msg: err } });\r\n    }\r\n\r\n    let textElems = $(\"body *\").filter((i, elem) => {\r\n      return $(elem).text();\r\n    });\r\n\r\n    // Getting the likes of the Facebook page\r\n    let likes = textElems\r\n      .filter((i, elem) => {\r\n        if ($(elem).is(\"div\")) {\r\n          return $(elem)\r\n            .text()\r\n            .match(/people like this/);\r\n        } else {\r\n          return false;\r\n        }\r\n      })\r\n      .last();\r\n    if (likes.length) {\r\n      likes = $(likes).text().replace(/\\D/g, \"\");\r\n      jsonResponse.body.likes = parseInt(likes);\r\n    }\r\n\r\n    // Getting the followers of the Facebook page\r\n    let followers = textElems\r\n      .filter((i, elem) => {\r\n        if ($(elem).is(\"span\")) {\r\n          return $(elem)\r\n            .text()\r\n            .match(/people follow this/);\r\n        } else {\r\n          return false;\r\n        }\r\n      })\r\n      .last();\r\n    if (followers.length) {\r\n      followers = $(followers).text().replace(/\\D/g, \"\");\r\n      jsonResponse.body.followers = parseInt(followers);\r\n    }\r\n\r\n    // Getting the name of the Facebook page\r\n    let title = $(\"h1 > span\")\r\n      .filter((i, elem) => {\r\n        return $(elem).text();\r\n      })\r\n      .first();\r\n    if (title.length) {\r\n      jsonResponse.body.pageTitle = title.text();\r\n    }\r\n\r\n    resolve(jsonResponse);\r\n  });\r\n}\r\n\r\n/*\r\nGet information on a Twitter page.\r\n*/\r\nfunction CheckTwitter(link) {\r\n  return new Promise(async (resolve, reject) => {\r\n    let jsonResponse = {\r\n      status: true,\r\n      body: {\r\n        followers: 0,\r\n        following: 0,\r\n      },\r\n    };\r\n\r\n    // Get HTML of website\r\n    let html, $;\r\n    try {\r\n      html = await (await fetch(cors + link)).text(); // Twitter is rejecting request\r\n      $ = cheerio.load(html);\r\n    } catch (err) {\r\n      reject({ status: false, body: { msg: err } });\r\n    }\r\n\r\n    // Get all anchor tags\r\n    let anchors = $(\"a\");\r\n\r\n    // Get 'following' anchor tags\r\n    let followingTags = $(anchors).filter((i, elem) => {\r\n      if ($(elem).attr(\"href\")) {\r\n        return $(elem)\r\n          .attr(\"href\")\r\n          .match(/following/);\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n\r\n    // Get following\r\n    let following;\r\n    if (followingTags.length) {\r\n      following = $(followingTags).find(\"span\");\r\n      if (following.length) {\r\n        following = $(following).filter((i, elem) => {\r\n          return $(elem).attr(\"data-count\");\r\n        });\r\n      }\r\n    }\r\n\r\n    if (following) {\r\n      jsonResponse.body.following = following;\r\n    }\r\n\r\n    // Get 'followers' anchor tags\r\n    let followerTags = $(anchors).filter((i, elem) => {\r\n      if ($(elem).attr(\"href\")) {\r\n        return $(elem)\r\n          .attr(\"href\")\r\n          .match(/followers/);\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n\r\n    // Get followers\r\n    let followers;\r\n    if (followerTags.length) {\r\n      followers = $(followerTags).find(\"span\");\r\n      if (followers.length) {\r\n        followers = $(followers).filter((i, elem) => {\r\n          return $(elem).attr(\"data-count\");\r\n        });\r\n      }\r\n    }\r\n\r\n    if (followers) {\r\n      jsonResponse.body.followers = followers;\r\n    }\r\n\r\n    resolve(jsonResponse);\r\n  });\r\n}\r\n\r\n/*\r\nGet information on an Instagram page.\r\n*/\r\nfunction CheckInsta(link) {\r\n  return new Promise(async (resolve, reject) => {\r\n    let jsonResponse = {\r\n      status: true,\r\n      body: {\r\n        followers: 0,\r\n        following: 0,\r\n      },\r\n    };\r\n\r\n    // Get HTML of website\r\n    let html, $;\r\n    try {\r\n      html = await (await fetch(cors + link)).text();\r\n      $ = cheerio.load(html);\r\n    } catch (err) {\r\n      reject({ status: false, body: { msg: err } });\r\n    }\r\n\r\n    resolve(jsonResponse);\r\n  });\r\n}\r\n\r\n/*\r\nCheck to see if Google has temporarily banned anymore google searches\r\n*/\r\nfunction CheckGoogleBotLock() {\r\n  let lock = \"GoogleBotLock\";\r\n  if (fsExistsSync(lock)) {\r\n    // If file exists\r\n    let time = fs.readFileSync(lock, \"utf8\");\r\n    if (Date.parse(time) + 60 * 60000 <= new Date().getTime()) {\r\n      // If 1 hour has passed\r\n      fs.unlinkSync(lock);\r\n      return true; // Allow for searching by returning true\r\n    }\r\n    return false; // If 1 hour hasn't passed then don't allow searching\r\n  }\r\n  return true; // If file doesn't exist then allow for searching\r\n}\r\n\r\n//------------------------------------------------------------------------------------//\r\n// Structure\r\n//------------------------------------------------------------------------------------//\r\n\r\n// Create wrapper which can be called by a front-end\r\nconst getLeads = ({ search, count, timeframe }) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    let result;\r\n    try {\r\n      search = search.replace(/\\s/g, \"%20\"); // Replace the spaces with something URL safe\r\n      result = await GetProspects(search, count, timeframe);\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n    resolve(result);\r\n  });\r\n};\r\n\r\nexport default getLeads;\r\n","D:\\Documents\\Webspred\\Webspred-App\\client\\src\\scripts\\getSemRushInfo.js",[],"D:\\Documents\\Webspred\\Webspred-App\\client\\src\\scripts\\createDrafts.js",[],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"106","replacedBy":"110"},{"ruleId":"108","replacedBy":"111"},{"ruleId":"106","replacedBy":"112"},{"ruleId":"108","replacedBy":"113"},{"ruleId":"106","replacedBy":"114"},{"ruleId":"108","replacedBy":"115"},{"ruleId":"106","replacedBy":"116"},{"ruleId":"108","replacedBy":"117"},{"ruleId":"106","replacedBy":"118"},{"ruleId":"108","replacedBy":"119"},{"ruleId":"106","replacedBy":"120"},{"ruleId":"108","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":2,"column":24,"nodeType":"124","messageId":"125","endLine":2,"endColumn":29},{"ruleId":"122","severity":1,"message":"126","line":16,"column":8,"nodeType":"124","messageId":"125","endLine":16,"endColumn":16},{"ruleId":"122","severity":1,"message":"127","line":18,"column":8,"nodeType":"124","messageId":"125","endLine":18,"endColumn":20},{"ruleId":"122","severity":1,"message":"128","line":19,"column":8,"nodeType":"124","messageId":"125","endLine":19,"endColumn":22},{"ruleId":"122","severity":1,"message":"129","line":23,"column":9,"nodeType":"124","messageId":"125","endLine":23,"endColumn":31},{"ruleId":"122","severity":1,"message":"130","line":606,"column":7,"nodeType":"124","messageId":"125","endLine":606,"endColumn":8},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],["131"],["132"],["131"],["132"],["131"],["132"],["131"],["132"],["131"],["132"],["131"],["132"],"no-unused-vars","'Field' is defined but never used.","Identifier","unusedVar","'getLeads' is defined but never used.","'createDrafts' is defined but never used.","'getSemRushInfo' is defined but never used.","'notificationDispatcher' is assigned a value but never used.","'$' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]